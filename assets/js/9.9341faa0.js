(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{345:function(t,n,a){"use strict";a.r(n);var s=a(33),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据类型"}},[t._v("#")]),t._v(" 1. 数据类型")]),t._v(" "),a("p",[t._v("在 ECMAScript 规范中，共定义了 7 种数据类型，分为基本类型和引用类型两大类。")]),t._v(" "),a("ul",[a("li",[t._v("基本数据类型：\n"),a("ul",[a("li",[t._v("String、Number、Boolean、Symbol、Undefined、Null")])])]),t._v(" "),a("li",[t._v("引用数据类型：\n"),a("ul",[a("li",[t._v("Object")])])])]),t._v(" "),a("p",[t._v("基本类型也称为简单类型，由于其占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈(stack)中，即按值访问。")]),t._v(" "),a("p",[t._v("引用类型也称为复杂类型，由于其值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此，其值存储在堆(heap)中，而存储在变量处的值，是一个指针，指向存储对象的内存处，即按址访问。引用类型除 Object 外，还包括 Function 、Array、RegExp、Date 等等。")]),t._v(" "),a("h2",{attrs:{id:"_2-typeof运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-typeof运算符"}},[t._v("#")]),t._v(" 2. typeof运算符")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("可以用 typeof 运算符判断的数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("number、string、boolean、symbol、undefined、function")]),t._v(" "),a("li",[t._v("NaN返回的是 number")]),t._v(" "),a("li",[t._v("null 和 array 返回的是 object")])])]),t._v(" "),a("li",[a("p",[t._v("可以用全等 "),a("code",[t._v("===")]),t._v(" 判断的数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("undefined、null")])])]),t._v(" "),a("li",[a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("typeof 运算符返回的是 "),a("strong",[t._v("字符串类型")]),t._v(" 的数据")]),t._v(" "),a("li",[t._v("返回的数据类型都是 "),a("strong",[t._v("小写")])])])]),t._v(" "),a("li",[a("p",[t._v("总结：")]),t._v(" "),a("ul",[a("li",[t._v("对于基本类型，除 null 以外，均可以返回正确的结果。")]),t._v(" "),a("li",[t._v("对于引用类型，除 function 以外，一律返回 object 类型。")]),t._v(" "),a("li",[a("strong",[t._v("只能判断除null外的基本数据类型以及function")])])])])]),t._v(" "),a("h2",{attrs:{id:"_3-instanceof-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-instanceof-运算符"}},[t._v("#")]),t._v(" 3. instanceof 运算符")]),t._v(" "),a("p",[t._v("instanceof 检测的是原型，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true，否则返回 false。")]),t._v(" "),a("ul",[a("li",[t._v("可以检测的数据类型：\n"),a("ul",[a("li",[t._v("Array、Function、RegExp")]),t._v(" "),a("li",[t._v("还可以用于检测是否为构造函数的实例")])])])]),t._v(" "),a("h2",{attrs:{id:"_4-constructor-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-constructor-属性"}},[t._v("#")]),t._v(" 4.  constructor 属性")]),t._v(" "),a("p",[t._v("当一个自定义函数 F被定义时，JS引擎会为F添加 prototype 原型，然后再在 prototype上添加一个 constructor 属性，并让其指向 F 的引用。")]),t._v(" "),a("p",[t._v("constructor 属性仅适用于用构造函数创建的实例对象")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("可以检测的数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("除了 undefined 和 null")])])]),t._v(" "),a("li",[a("p",[t._v("注意:")]),t._v(" "),a("ul",[a("li",[t._v("用constructor属性来判断类型是不确定的，开发者可以后来改变原型的内容来改变constructor的指向")]),t._v(" "),a("li",[a("strong",[t._v("仅适用于底层调用构造函数创建的实例")])])])])]),t._v(" "),a("h2",{attrs:{id:"_5-tostring方法（万能）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-tostring方法（万能）"}},[t._v("#")]),t._v(" 5.  toString方法（万能）")]),t._v(" "),a("p",[t._v("toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。")]),t._v(" "),a("p",[t._v("对于 Object 对象，直接调用 toString() 就能返回 [object Object] 。而对于其他对象，则需要通过强制调用才能返回正确的类型信息。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);